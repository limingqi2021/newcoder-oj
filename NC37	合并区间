/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
// bool cmp(Interval a,Interval b){
//     if(a.start==b.start)
//         return a.end<b.end;
//     return a.start<b.start;
// }
class Solution {
public:
    vector<Interval> merge(vector<Interval> &intervals) {
        sort(intervals.begin(),intervals.end(),[](Interval a,Interval b)->bool{return a.start<b.start;});
        vector<Interval> res;
        if(intervals.size()==0)
            return res;
        for(int i=0;i<intervals.size();){
            int t=intervals[i].end;
            int j=i+1;
            while(j<intervals.size()&&intervals[j].start<=t){
                t=max(t,intervals[j].end);
                j++;
            }
            res.push_back({intervals[i].start,t});
            i=j;
        }
        return res;
    }
};
