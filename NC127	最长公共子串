class Solution {
public:
    /**
     * longest common substring
     * @param str1 string字符串 the string
     * @param str2 string字符串 the string
     * @return string字符串
     */
    int t=0,q=0;
    string LCS(string str1, string str2) {
     int n=str1.size(),m=str2.size();
        int res=0;
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                if(str1[i]==str2[j])
                    dp[i][j]=dp[i+1][j+1]+1;
                 else
                    dp[i][j]=0;
                if(dp[i][j]>=res){
                    res=dp[i][j];
                    t=i;
                    q=j;
                }
            }
        }
        string s1="";
        while(res>0)
        {
            s1+=str2[q++];
            res--;
        }
        for(int i=t;i<t+res;i++){
            s1+=str1[i];
        }
       return s1;
    }
//         int n=str1.size(),m=str2.size();
//         int res=0;
//         for(int i=0;i<n;i++){
//         int len=min(m,n-i);
//         int maxLen=maxLength(str1,str2,i,0,len);
//         res=max(res,maxLen);
//         }
//         for(int i=0;i<m;i++){
//         int len=min(n,m-i);
//         int maxLen=maxLength(str1,str2,0,i,len);
//         res=max(res,maxLen);
//         }
//         string s1="";
//         while(res>0)
//         {
//             s1+=str2[q--];
//             res--;
//         }
//         return s1;
//     }
//     int maxLength(string& A,string& B,int a,int b,int len){
//         int k=0, res1=0;
//         for(int i=0;i<len;i++){
//             if(A[a+i]==B[b+i])
//                 k++;
//             else
//                 k=0;
//             if(k>res1){
//                 res1=k;
//                 t=a+i;
//                 q=b+i;
//             }
            
//             }
//             return res1;
//      }
        

};
