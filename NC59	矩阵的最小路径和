class Solution {
public:
    /**
     * 
     * @param matrix int整型vector<vector<>> the matrix
     * @return int整型
     */
    int minPathSum(vector<vector<int> >& matrix) {
        // write code here
                int row=matrix.size(),col=matrix[0].size();
        if(row==0)
            return 0;
        vector<vector<int>> dp(row,vector<int> (col,0));
        // dp[0][0]=grid[0][0];

        // for(int i=1;i<row;i++){
        //     dp[i][0]=dp[i-1][0]+grid[i][0];
        // }
        // for(int j=1;j<col;j++){
        //     dp[0][j]=dp[0][j-1]+grid[0][j];
        // }
        // for(int i=1;i<row;i++){
        //     for(int j=1;j<col;j++){
        //         dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
        //     }
        // }
        // for(int i=0;i<row;i++){
        //     for(int j=0;j<col;j++){
        //         if(i==0&&j==0) grid[0][0]=grid[0][0];
        //         else if(i==0)  grid[0][j]=grid[0][j-1]+grid[0][j];
        //         else if(j==0)  grid[i][0]=grid[i-1][0]+grid[i][0];
        //         else  grid[i][j]=min(grid[i-1][j],grid[i][j-1])+grid[i][j];
        //     }
        // }
            for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(i==0&&j==0) dp[0][0]=matrix[0][0];
                else if(i==0)  dp[0][j]=dp[0][j-1]+matrix[0][j];
                else if(j==0)  dp[i][0]=dp[i-1][0]+matrix[i][0];
                else  dp[i][j]=min(dp[i-1][j],dp[i][j-1])+matrix[i][j];
            }
        }
        return dp[row-1][col-1];
    }
};
