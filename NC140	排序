class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * 将给定数组排序
     * @param arr int整型vector 待排序的数组
     * @return int整型vector
     */
//     //快速排序
//     vector<int> MySort(vector<int>& arr) {
//         // write code here
//         quicksort(arr, 0, arr.size()-1);
//         return arr;
     
//     }
//     int partion(vector<int> &arr,int low,int high){
//         int pivot=arr[high];
//         while(low<high){
//             while(low<high&&arr[low]<=pivot){
//                 low++;
//             }
//             //swap(arr[low],arr[high]);
//             while(low<high&&arr[high]>=pivot){
//                 high--;
//             }
//             swap(arr[low],arr[high]);
//         }
//         arr[low]=pivot;
//         return low;
//     }
//     void quicksort(vector<int>& arr,int low,int high){
//         if(low<high){
//             int pos=partion(arr,  low, high);
//             quicksort(arr, low, pos-1);
//             quicksort(arr, pos+1, high);
//         }
//     }
    
//     //堆排序
//     vector<int> MySort(vector<int>& arr) {
//         heapsort(arr);
//         return arr;
//     }
//     void maxHeapify(vector<int>& arr,int i,int len){
//         int j=2*i+1;
//         while(j<=len){
//             if(j+1<=len&&arr[j+1]>arr[j]){
//                 j=j+1;
//             }
//             if(arr[j]>arr[i]){
//                 swap(arr[j],arr[i]);
//                 i=j;
//                 j=2*i+1;
//             }else{
//                 break;
//             }
//         }
//     }
//     void buildHeap(vector<int> &arr,int len){
//         for(int i=len/2;i>=0;i--){
//             maxHeapify(arr, i, len);
//         }
//     }
//     void heapsort(vector<int> &arr){
//         int len=arr.size()-1;
//         buildHeap(arr,len);
//         for(int i=len;i>0;i--){
//             swap(arr[i],arr[0]);
//             maxHeapify(arr,0, i-1);
//         }
//     }
    //归并排序 递归
    vector<int> MySort(vector<int>& arr) {
        mergesort(arr, 0, arr.size()-1);
        return arr;
    }
    void mergesort(vector<int>& arr,int left,int right){
        if(left<right){
            int mid=(left+right)/2;
            mergesort(arr,left,mid);
            mergesort(arr,mid+1,right);
            merge(arr,left,mid,mid+1,right);
        }
    }
    void merge(vector<int>& arr,int left1,int right1,int left2,int right2){
        vector<int> res(right2-left1+1);
        //int res[10000];
        int i=left1,j=left2,count=0;
        while(i<=right1&&j<=right2){
            if(arr[i]<arr[j])
                res[count++]=arr[i++];
            else
                res[count++]=arr[j++];
        }
        while(i<=right1) res[count++]=arr[i++];
        while(j<=right2) res[count++]=arr[j++];
        for(int i=0;i<right2-left1+1;i++)
            arr[left1+i]=res[i];
        
    }
    
};
